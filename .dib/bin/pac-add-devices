#!/usr/bin/env python

import os
import sys
import getopt
import urllib2
import json
import re
from xml.etree import ElementTree

# in-place prettyprint formatter
def indent(elem, level=0):
    i = "\n" + level*"  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for elem in elem:
            indent(elem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = i

def load_manifest(file):
    try:
        m = ElementTree.parse(file)
        m = m.getroot()
    except:
        m = ElementTree.Element("manifest")

    return m

def load_main_manifest():
    m = load_manifest(".repo/manifest.xml")
    for root, subdirs, files in os.walk(".repo/local_manifests"):
        for f in files:
            if f.endswith('.xml') and f != "device.xml":
                lm = load_manifest(os.path.join(root, f))
                m.append(lm)

    return m

def load_nightly_list(file):
    nightly_list = dict()

    try:
        m = ElementTree.parse(file)
        m = m.getroot()
    except:
        m = ElementTree.Element("manifest")

    for e in m.findall("device"):
        name = e.get('name')
        priority = e.get('priority')
        nightly_list[name] = priority

    return nightly_list

def project_in_manifest(manifest, name):
    for project in manifest.findall("project"):
        if project.get("name") == name:
            return True

    return False

def paths_conflict(path1, path2):
    if len(path1) < len(path2):
        path1, path2 = path2, path1

    while len(path1) >= len(path2):
        if path1 == path2:
            return True
        idx = path1.rfind('/')
        if idx > 0:
            path1 = path1[0:idx]
        else:
            path1 = ''

    return False

def path_in_manifest(manifest, path):
    for project in manifest.findall("project"):
        project_path = project.get("path")
        if paths_conflict(project_path, path):
            return True

    return False

def write_manifest(manifest, path):
    indent(manifest, 0)

    f = open(path, 'w')
    f.write('<?xml version="1.0" encoding="UTF-8"?>\n')
    f.write(ElementTree.tostring(manifest))
    f.close()

def get_device_dependencies(main_manifest, device):
    try:
        depfile = open('vendor/pac/dependencies/%s.dependencies' % device, 'r')
        deps = json.loads(depfile.read())
        depfile.close()
    except:
        print 'ineligible device %s: malformed dependencies file' % device
        return []

    projects = []
    for dep in deps:
        try:
            dep_name = dep['account'] + "/" + dep['repository']
            dep_path = dep['target_path']
            dep_revision = dep['revision']
        except:
            print 'ineligible device %s: incomplete dependency' % device
            return []

        if project_in_manifest(main_manifest, dep_name):
            print 'ineligible device %s: project %s in main_manifest' % (device, dep_name)
            return []
        if path_in_manifest(main_manifest, dep_path):
            print 'ineligible device %s: path %s in main_manifest' % (device, dep_path)
            return []

        p = ElementTree.Element("project", attrib = {
                "path": dep_path,
                "remote": "github",
                "name": dep_name,
                "revision": dep_revision
            })
        projects.append(p)

    return projects


def get_device_list():
    blacklisted = set()
    #blacklisted.add('device')
    device_list = []
    for root, subdirs, files in os.walk("vendor/pac/products"):
        for f in files:
            if not (f.startswith('pac_') and f.endswith('.mk')):
                continue
            d = f[4:-3]
            if d in blacklisted:
                print 'ineligible device %s: blacklisted' % d
                continue
            if not os.path.exists('vendor/pac/dependencies/%s.dependencies' % d):
                print 'ineligible device %s: no dependencies' % d
                continue
            if os.path.exists('vendor/pac/manifest/%s.adds' % d) or os.path.exists('vendor/pac/manifest/%s.removes' % d):
                print 'ineligible device %s: has adds/removes' % d
                continue
            device_list.append(d)
    device_list.sort()
    return device_list

def project_name_priority(name):
    name_prio = {
            'pac-man/': 3,
            'pac-' : 2,
            'pinky-inky-and-clyde/': 1,
        }

    lower_name = name.lower()
    for k, v in name_prio.iteritems():
        if lower_name.startswith(k):
            return v
    return 0

def check_manifest_conflicts(device_manifest, device1, device2):
    projects1 = device_manifest[device1]
    projects2 = device_manifest[device2]

    for p1 in projects1:
        path1 = p1.get('path')
        name1 = p1.get('name')

        for p2 in projects2:
            path2 = p2.get('path')
            name2 = p2.get('name')

            if path1 == path2:
                if name1 == name2:
                    continue
                prio1 = project_name_priority(name1)
                prio2 = project_name_priority(name2)
                loser = ''
                if prio1 > prio2:
                    loser = device2
                else:
                    loser = device1
                print 'ineligible device %s: path %s incompatible between %s and %s' % (loser, path1, device1, device2)
                return loser
            else:
                if paths_conflict(path1, path2):
                    if len(path1) > len(path2):
                        loser = device1
                    else:
                        loser = device2
                    print 'ineligible device %s: paths %s and %s conflict between %s and %s' % (loser, path1, path2, device1, device2)
                    return loser

    return ''

optargs, argv = getopt.getopt(sys.argv[1:], 'd', ['debug'])
for k, v in optargs:
    if k in ('-d', '--debug'):
        debug_level += 1

